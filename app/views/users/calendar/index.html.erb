<div class="min-h-screen bg-gradient-to-br from-sky-50 to-blue-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-sky-800 mb-2">📅 予約カレンダー</h1>
      <p class="text-sky-600">予約状況の確認と新規予約</p>
    </div>

    <!-- 新規予約ボタン -->
    <div class="text-center mb-6">
      <%= link_to "新規予約を作成", new_users_reservation_path, 
          class: "inline-flex items-center px-6 py-3 bg-sky-500 hover:bg-sky-600 text-white font-medium rounded-lg transition-colors duration-200" %>
    </div>

    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div id="calendar" class="w-full"></div>
    </div>


  </div>
</div>

<!-- FullCalendar CSS -->
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.18/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.18/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.18/main.min.css' rel='stylesheet' />

<!-- FullCalendar JavaScript -->
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.18/main.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.18/main.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.18/main.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.18/main.min.js'></script>

<script>
// グローバル変数をvarで宣言（再宣言エラーを防ぐ）
var calendar = null;

// カレンダーを初期化する関数
function initializeCalendar() {
  var calendarEl = document.getElementById('calendar');
  if (!calendarEl) return;
  
  // 既存のカレンダーがあれば破棄
  if (calendar) {
    calendar.destroy();
  }
  
  calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'dayGridMonth',
    locale: 'ja',
    headerToolbar: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridWeek'
    },
    buttonText: {
      today: '今日',
      month: '月',
      week: '週'
    },
    dayMaxEvents: true,
    events: function(info, successCallback, failureCallback) {
      // 予約済みのスロットを表示
      fetch(`/users/calendar/slots/${info.startStr.split('T')[0]}`)
        .then(response => response.json())
        .then(data => {
          var events = [];
          data.forEach(function(slot) {
            if (!slot.available) {
              events.push({
                title: '予約済み',
                start: slot.start_time,
                end: slot.end_time,
                backgroundColor: '#ef4444',
                borderColor: '#ef4444',
                textColor: 'white'
              });
            }
          });
          successCallback(events);
        })
        .catch(error => {
          console.error('Error fetching events:', error);
          failureCallback(error);
        });
    }
  });
  calendar.render();
}

// ページ読み込み時の初期化
function initializePage() {
  initializeCalendar();
}

// DOMContentLoadedとturbo:loadの両方に対応
document.addEventListener('DOMContentLoaded', initializePage);
document.addEventListener('turbo:load', initializePage);
</script> 